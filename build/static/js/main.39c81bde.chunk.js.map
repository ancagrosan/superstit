{"version":3,"sources":["fire.js","config.js","Form.js","Superstition.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","country","type","textareaFontSize","formValid","e","preventDefault","timestamp","Date","now","database","ref","push","setState","target","value","val","length","fontSize","trim","_this2","react_default","a","createElement","onSubmit","addMessage","bind","className","style","onChange","textareaChange","placeholder","rows","selectType","name","checked","rcrs_es","selectCountry","disabled","Component","JavascriptTimeAgo","locale","en","Superstition","voteCount","item","id","on","snapshot","newVoteCount","update","message","key","no_tooltip_default","onClick","upVote","App","messages","orderByKey","limitToLast","concat","src_Form","map","src_Superstition","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39c81bde.chunk.js","sourcesContent":["import firebase from 'firebase'\nimport { firebaseConfig } from \"./config.js\";\n\nvar fire = firebase.initializeApp(firebaseConfig);\nexport default fire;\n","var firebaseConfig = {\n    apiKey: \"AIzaSyCkmwP8PeNDo0zqa4mJoi4ockXK1S_B1Oo\",\n    authDomain: \"superstit-19ce9.firebaseapp.com\",\n    databaseURL: \"https://superstit-19ce9.firebaseio.com\",\n    projectId: \"superstit-19ce9\",\n    storageBucket: \"superstit-19ce9.appspot.com\",\n    messagingSenderId: \"591032376593\"\n};\nexport {firebaseConfig};","import React, { Component } from 'react';\nimport fire from './fire';\nimport { CountryDropdown } from 'react-country-region-selector';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            text: '', \n            country: '', \n            type: 'general',\n            textareaFontSize: '2',\n            formValid: false\n        };\n    }\n    addMessage(e){\n        e.preventDefault();\n        const timestamp = Date.now();\n        \n        fire.database().ref('messages').push({\n            text: this.state.text,\n            type: this.state.type,\n            country: this.state.country,\n            timestamp: timestamp\n        });\n\n        this.setState({\n            text: '',\n            country: '',\n            type: 'general',\n            timestamp: timestamp\n        });    \n    }\n    selectType(e){\n        this.setState({ type: e.target.value });\n    }\n    selectCountry (val) {\n        this.setState({ country: val });\n    }\n    textareaChange(e) {\n        let length = e.target.value.length,\n            fontSize = this.state.textareaFontSize,\n            formValid = this.state.formValid;\n\n        if (e.target.value.trim().length > 0 && e.target.value.trim().length < 500){\n            formValid = true\n        } else {\n            formValid = false\n        }\n\n        if(length>120){\n            fontSize = 1;\n        } else if (length>90){\n            fontSize = 1.25;\n        } else if (length>60){\n            fontSize = 1.5;\n        } else if (length>30){\n            fontSize = 1.75;\n        } else {\n            fontSize = 2;\n        }\n\n        this.setState({\n            text: e.target.value,\n            textareaFontSize: fontSize,\n            formValid: formValid\n        });\n    }\n    render() {\n        const { country } = this.state;\n\n        return (\n            <form onSubmit={this.addMessage.bind(this)}>\n                <textarea \n                    className=\"new-superstition\"\n                    style={{fontSize: this.state.textareaFontSize + 'rem'}}\n                    type=\"text\" \n                    onChange={this.textareaChange.bind(this)}\n                    placeholder=\"What's your superstition about, is it personal, where is it from?\"\n                    rows=\"6\"\n                    value={this.state.text} />\n                \n                <div>\n                    <input \n                        onChange={this.selectType.bind(this)} \n                        type=\"radio\" \n                        value=\"general\" \n                        name=\"type\" \n                        checked={this.state.type===\"general\"}/>\n                    General\n                    \n                    <input \n                        onChange={this.selectType.bind(this)} \n                        type=\"radio\" \n                        value=\"personal\" \n                        checked={this.state.type===\"personal\"}\n                        name=\"type\"/>\n                    Personal\n                </div>\n\n                <CountryDropdown onChange={(val) => this.selectCountry(val)} value={country}/>\n                \n                <button \n                    disabled={! this.state.formValid}\n                    type=\"submit\"\n                    className=\"add-btn\">\n                    ADD\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport fire from './fire';\n\nimport JavascriptTimeAgo from 'javascript-time-ago'\nimport TimeAgo from 'react-time-ago/no-tooltip'\nimport en from 'javascript-time-ago/locale/en'\n\nJavascriptTimeAgo.locale(en)\n\nclass Superstition extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            voteCount: this.props.item.voteCount || 0\n        };\n    }\n    componentWillMount() {\n        let message = fire.database().ref('messages/' + this.props.item.id);\n        message.on('value', snapshot => {\n            this.setState({ voteCount: snapshot.val().voteCount });\n        });\n    }\n    upVote(e) {\n        let newVoteCount = this.state.voteCount ? this.state.voteCount + 1 : 1;\n        \n        return fire.database() \n            .ref('messages/' + this.props.item.id)\n            .update({voteCount: newVoteCount});\n    }\n\n    render() {\n        let message = this.props.item;\n\n        return (\n            <li key={message.id}>\n                {message.text}\n                \n                <hr/>\n                <div className=\"small\">\n                    type: {message.type}\n\n                    {message.country &&\n                        <span>\n                            origin:&nbsp;\n                            {message.country}\n                        </span>\n                    }\n\n                    {message.timestamp && \n                        <span>posted on:&nbsp;\n                            <TimeAgo>\n                                {message.timestamp}\n                            </TimeAgo>\n                        </span>\n                    }\n\n                    <span \n                        className=\"upvotes\">\n                        <span onClick={this.upVote.bind(this)} className=\"triangle-up\"></span>\n                        {this.state.voteCount}\n                    </span>\n                </div>\n            </li>        \n        );\n    }\n}\n\nexport default Superstition;","import React, { Component } from 'react';\nimport fire from './fire';\n\nimport Form from './Form.js'\nimport Superstition from './Superstition.js'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      messages: [], \n    };\n  }\n  componentWillMount() {\n    /* Create reference to messages in Firebase Database */\n    let messagesRef = fire.database().ref('messages').orderByKey().limitToLast(100);\n    messagesRef.on('child_added', snapshot => {\n      /* Update React state when message is added at Firebase Database */\n\n      let message = {\n        text: snapshot.val().text,\n        type: snapshot.val().type,\n        country: snapshot.val().country,\n        timestamp: snapshot.val().timestamp,\n        voteCount: snapshot.val().voteCount,\n        id: snapshot.key\n      };\n      \n      this.setState({ messages: [message].concat(this.state.messages) });\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"feedContainer\">\n\n        <Form/>\n\n        <div className=\"feed\">\n          <ul>\n            { /* Render the list of superstitions */\n              this.state.messages.map( message => \n                <Superstition item={message} key={message.id} />)\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}